class Ops::DashboardController < ApplicationController\n  before_action :require_admin!\n\n  def index\n    @filters = extract_filters\n    @posts = DashboardQuery.new(@filters).results.page(params[:page])\n  end\n\n  def csv\n    filters = extract_filters\n    cols = (params[:columns] || "title,title_with_latest").split(",")\n    posts = DashboardQuery.new(filters).results.limit(200_000)\n\n    headers["Content-Type"] = "text/csv; charset=utf-8"\n    headers["Content-Disposition"] = "attachment; filename=posts_#{Time.now.strftime('%Y%m%d_%H%M')}.csv"\n\n    self.response_body = Enumerator.new do |y|\n      y << cols.join(",") + "\n"\n      posts.find_each(batch_size: 1000) do |p|\n        row = cols.map { |c| csv_value_for(c, p) }\n        y << row.map { |v| v.to_s.gsub(",", " ") }.join(",") + "\n"\n      end\n    end\n  end\n\n  def requeue\n    ids = Array(params[:ids]).map(&:to_i)\n    step = params[:step].to_s\n    ids.each { |pid| Pipeline.enqueue_step(pid, step) }\n    redirect_to ops_dashboard_path, notice: "#{ids.size}건 재큐잉됨"\n  end\n\n  private\n  def require_admin!\n    raise ActiveRecord::RecordNotFound unless current_user&.admin?\n  end\n\n  def csv_value_for(col, post)\n    case col\n    when "pid" then post.id\n    when "title" then post.title\n    when "title_with_latest"\n      t = post.title.to_s\n      t =~ /\[최신\]$/ ? t : "#{t} [최신]"\n    when "url" then post.canonical_url\n    when "category" then post.category_name\n    when "words" then post.metric&.words\n    when "score_7d" then post.score_7d\n    when "score_28d" then post.score_28d\n    when "ops_version" then post.ops_state&.ops_version_global\n    when "last_step" then post.ops_state&.last_step\n    when "index_status" then post.index_status\n    else ""\n    end\n  end\n\n  def extract_filters\n    {\n      unscored: ActiveModel::Type::Boolean.new.cast(params[:unscored]),\n      version_below: params[:version_below],\n      category: params[:category],\n      min_words: params[:min_words],\n      updated_since: params[:updated_since]\n    }.compact\n  end\nend\n\n