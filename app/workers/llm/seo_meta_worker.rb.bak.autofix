module Llm\n  class SeoMetaWorker\n    include Sidekiq::Worker\n    sidekiq_options queue: :llm\n    def perform(post_id)\n      p = Post.find(post_id)\n      summary = p.plain_text.truncate(500)\n      prompt = SEO::PromptTemplates::TEMPLATE % { title: p.title, category: p.category_name, existing: (p.tags || []).join(', '), summary: summary }\n      json = call_llm(prompt)\n      validated = validate_and_fix(json, title: p.title)\n      apply_to_post!(p, validated)\n      PostsOpsStep.upsert_step(post_id: p.id, step: 'seo_meta', version: '2.0.0')\n    end\n    def call_llm(prompt)\n      { "rankmath_focus_keyword" => "", "tags" => [], "description" => "" }\n    end\n    def validate_and_fix(obj, title:)\n      fk = obj["rankmath_focus_keyword"].to_s\n      unless title.start_with?(fk)\n        fk = title.split(/[\s-]/).first(3).join(" ")\n      end\n      obj["rankmath_focus_keyword"] = fk\n      tags = Array(obj["tags"]).map(&:to_s).map(&:strip).uniq\n      tags.reject! { |t| SEO::PromptTemplates::TAG_BLOCKLIST.include?(t) }\n      obj["tags"] = tags.first(4)\n      obj\n    end\n    def apply_to_post!(post, meta)\n      post.update!(rankmath_focus_keyword: meta["rankmath_focus_keyword"], tags: meta["tags"], meta_description: meta["description"])\n    end\n  end\nend\n\n