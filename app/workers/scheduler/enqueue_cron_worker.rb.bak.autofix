module Scheduler\n  class EnqueueCronWorker\n    include Sidekiq::Worker\n    sidekiq_options queue: :scheduler\n    def perform(args = {})\n      task = (args["task"] || args[:task]).to_s\n      case task\n      when "indexing_fresh"\n        Post.recently_changed.find_each { |p| Indexing::IndexnowSubmitWorker.perform_async(p.id) }\n      when "analytics_incremental"\n        Post.changed_last(36.hours).find_each do |p|\n          Analytics::WordCountWorker.perform_async(p.id)\n          Analytics::Ga4PullWorker.perform_async(p.id)\n        end\n      when "ga4_rollup"\n        Post.published.find_each { |p| Analytics::ScoreComputeWorker.perform_async(p.id) }\n      when "ops_journal_full"\n        System::OpsJournalFullJob.perform_later\n      when "latest_scan"\n        Post.latest_candidate.find_each { |p| Io::UpdateSwapWorker.perform_async(p.id) }\n      end\n    end\n  end\nend\n\n